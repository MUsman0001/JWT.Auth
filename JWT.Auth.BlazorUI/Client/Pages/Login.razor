@page "/login"
@using System.Text.Json;
@using System.Text;
@using JWT.Auth.BlazorUI.Shared.Models;
@using JWT.Auth.BlazorUI.Client.Pages;
@inject NavigationManager Navigation

@inject HttpClient _http

<div class="ma-6 d-flex justify-center">
    <MudChip Color="Color.Primary">
        <h3>Login Form</h3>
    </MudChip>
</div>
<div class="ma-6 d-flex justify-center">
    <MudCard Width="500px">
        <MudForm Model="loginModel" @ref="form" Validation="loginValidation.ValidateValue">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(APIErrorMessage))
                {
                    <MudChip Class="d-flex justify-center" Color="Color.Error">
                        <h3>@APIErrorMessage</h3>
                    </MudChip>
                }
                <MudTextField @bind-Value="loginModel.Email"
                              For="@(() => loginModel.Email)"
                              Immediate="true"
                              Label="Email" />
                <MudTextField @bind-Value="loginModel.Password"
                              For="@(() => loginModel.Password)"
                              Immediate="true"
                              Label="Password" InputType="InputType.Password" />
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync">Login</MudButton>
                </MudCardActions>
            </MudCardContent>
        </MudForm>
    </MudCard>
</div>
@code {
    LoginVm loginModel = new LoginVm();

    LoginValidationVm loginValidation = new LoginValidationVm();

    MudForm form;

    string APIErrorMessage = string.Empty;

    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("/api/User/login", requestContent);

            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errors = await response.Content
                  .ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessage = $"{errorMessage} | ";
                        }
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                // On successful user authentication.
                Navigation.NavigateTo("/dashboard"); // Assuming "/" is your home page after login
            }
            else
            {
                APIErrorMessage = "Unable to do login, please try later";
            }

        }
    }
}
